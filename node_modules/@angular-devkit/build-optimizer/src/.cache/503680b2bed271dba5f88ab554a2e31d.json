{"remainingRequest":"C:\\Users\\Freddy\\Desktop\\stat\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Freddy\\Desktop\\stat\\node_modules\\core-js\\modules\\_for-of.js","dependencies":[{"path":"C:\\Users\\Freddy\\Desktop\\stat\\node_modules\\core-js\\modules\\_for-of.js","mtime":499162500000},{"path":"C:\\Users\\Freddy\\Desktop\\stat\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526574658797},{"path":"C:\\Users\\Freddy\\Desktop\\stat\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar ɵ0 = function (iterable, entries, fn, that, ITERATOR) {\n    var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n    var f = ctx(fn, that, entries ? 2 : 1);\n    var index = 0;\n    var length, step, iterator, result;\n    if (typeof iterFn != 'function')\n        throw TypeError(iterable + ' is not iterable!');\n    // fast case for arrays with default iterator\n    if (isArrayIter(iterFn))\n        for (length = toLength(iterable.length); length > index; index++) {\n            result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n            if (result === BREAK || result === RETURN)\n                return result;\n        }\n    else\n        for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n            result = call(iterator, f, step.value, entries);\n            if (result === BREAK || result === RETURN)\n                return result;\n        }\n};\nexports.ɵ0 = ɵ0;\nvar exports = module.exports = ɵ0;\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n",null]}